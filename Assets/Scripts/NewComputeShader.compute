// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct BoidData
{
    float3 pos;
    float3 desiredDir;
    float3 curDir;
};

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<BoidData> Data;
float Weights[4];
int NumBoids;
float Radius;
float BigRadius;
float3 BorderCenter;
float3 BorderSize;

float sqrmag(float3 p1, float3 p2)
{
    return (p1.x - p2.x) * (p1.x - p2.x) +
    (p1.y - p2.y) * (p1.y - p2.y) +
    (p1.z - p2.z) * (p1.z - p2.z);
}

bool IsPointInBounds(float3 p, float3 center, float3 size)
{
    float halfX = size.x * 0.5;
    float halfY = size.y * 0.5;
    float halfZ = size.z * 0.5;
    return (p.x > center.x - halfX && p.x < center.x + halfX &&
        p.y > center.y - halfY && p.y < center.y + halfY &&
        p.z > center.z - halfZ && p.z < center.z + halfZ);
}

[numthreads(256,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float3 coh = float3(0, 0, 0);
    float3 sep = float3(0, 0, 0);
    float3 align = float3(0, 0, 0);
    float3 border = float3(0, 0, 0);
    int numSep = 0;
    int numAlign = 0;
    int numCoh = 0;
    for (int i = 0; i < NumBoids; i++)
    {
        float dist = sqrmag(Data[i].pos, Data[id.x].pos);
        if (dist <= Radius * Radius && dist > 0)
        {
            sep += (Data[id.x].pos - Data[i].pos) / dist;
            numSep++;
        }
        if (dist <= BigRadius * BigRadius && dist > 0)
        {
            align += Data[i].curDir;
            numAlign++;
            coh += Data[i].pos;
            numCoh++;
        }
    }

    if (numCoh != 0)
    {
        coh = normalize((coh / numCoh) - Data[id.x].pos) * Weights[0];
    }
    if (numSep != 0)
    {
        sep = normalize(sep / numSep) * Weights[1];
    }
    if (numAlign != 0)
    {
        align = normalize((align - Data[id.x].curDir) / numAlign) * Weights[2];
    } 
    //Apply Bounds
    if (!IsPointInBounds(Data[id.x].pos, BorderCenter, BorderSize))
    {
        border = normalize(BorderCenter - Data[id.x].pos) * Weights[3];
    }
    
    BoidData data = Data[id.x];
    data.desiredDir = (coh + sep + align + border) / 4.0;
    Data[id.x] = data;
}


